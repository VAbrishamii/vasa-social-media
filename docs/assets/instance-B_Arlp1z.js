const d="683a46aa-a881-47a7-9445-dfdb6e68df1f",l="https://v2.api.noroff.dev";function i(){const h=localStorage.getItem("accessToken"),s=new Headers;return s.append("Content-Type","application/json"),s.append("X-Noroff-API-Key",d),h&&s.append("Authorization",`Bearer ${h}`),s}class w{apiBase="";apiLogin="";apiRegister="";constructor(s=l){this.apiBase=s,this.apiLogin=`${s}/auth/login`,this.apiRegister=`${s}/auth/register`}auth={login:async({email:s,password:o})=>{const e=JSON.stringify({email:s,password:o}),t=await fetch(this.apiLogin,{headers:i(),method:"POST",body:e});if(t.ok){const{data:n}=await t.json(),{accessToken:c,...p}=n;return localStorage.setItem("accessToken",c),localStorage.setItem("user",JSON.stringify(p)),window.location.href="/post/feed/",n}const a=(await t.json()).errors[0]?.message||"Could not login with this account";throw new Error(a)},register:async({name:s,email:o,password:e})=>{const t=JSON.stringify({name:s,email:o,password:e}),r=await fetch(this.apiRegister,{method:"POST",headers:i(),body:t});if(r.ok){const{data:c}=await r.json();return c}const n=(await r.json()).errors[0]?.message||"Could not register with this account";throw new Error(n)}}}class f{apiBase="";apiCreatePosts="";apiReadPosts="";apiUpdatePosts="";apiDeletePosts="";apiPostFromFollowing="";apiCommentPosts="";constructor(s=l){this.apiBase=s,this.apiCreatePosts=`${this.apiBase}/social/posts`,this.apiReadPosts=`${this.apiBase}/social/posts`,this.apiUpdatePosts=`${this.apiBase}/social/posts/id`,this.apiDeletePosts=`${this.apiBase}/social/posts/id`,this.postsfromfollowing=`${this.apiBase}/social/posts/following`,this.apiCommentPosts=`${this.apiBase}/social/posts/id/comment`}post={create:async({title:s,body:o,tags:e,media:t})=>{const r=JSON.stringify({title:s,body:o,tags:e,media:t});try{const a=await fetch(this.apiCreatePosts,{method:"POST",headers:i(),body:r});if(a.ok)return await a.json();{const n=await a.json();throw new Error(n.errors[0]?.message||"Could not create post")}}catch(a){throw a}},read:async()=>{const s=new URLSearchParams({_author:!0,_comments:!0,_reactions:!0}),o=await fetch(`${this.apiReadPosts}?${s}`,{method:"GET",headers:i()});if(o.ok){const{data:e}=await o.json();return e}else{const e=await o.json();throw new Error(e.errors[0]?.message||"Could not fetch post")}},readSinglePost:async s=>{const o=new URLSearchParams({_author:!0,_comments:!0,_reactions:!0});try{const e=await fetch(`${this.apiReadPosts}/${s}?${o}`,{method:"GET",headers:i()});if(e.ok)return await e.json();{const t=await e.json();throw new Error(t.errors[0]?.message||"Could not fetch post")}}catch(e){throw e}},update:async(s,o)=>{if(!JSON.parse(localStorage.getItem("user")))throw new Error("User must be logged in to update posts.");try{const t=await fetch(`${this.apiUpdatePosts.replace("id",s)}`,{method:"PUT",headers:i(),body:JSON.stringify(o)});if(t.ok)return await t.json();{const r=await t.json();throw new Error(r.errors[0]?.message||"Could not update post")}}catch(t){throw t}},delete:async s=>{try{const o=await fetch(`${this.apiDeletePosts.replace("id",s)}`,{method:"DELETE",headers:i()});if(o.ok)return!0;const e=await o.json();throw new Error(e.errors[0]?.message||"Could not delete post")}catch(o){throw o}},comment:async(s,{body:o})=>{const e=JSON.stringify({body:o});try{const t=await fetch(`${this.apiCommentPosts.replace("id",s)}`,{method:"POST",headers:i(),body:e});if(t.ok){const r=await t.json();return await this.post.readSinglePost(s)}else{const r=await t.json();throw new Error(r.errors[0]?.message||"Could not post comment")}}catch(t){throw t}},getPostsFromFollowing:async s=>{const o=new URLSearchParams({_author:!0,_comments:!0,_reactions:!0}),e=`${this.postsfromfollowing}?${o}`;console.log("url getpostsfromfollowing",e);const t=await fetch(e,{method:"GET",headers:i()});if(t.ok){const{data:n}=await t.json();return n}const a=(await t.json()).errors[0]?.message||"Could not read posts from following";throw new Error(a)}}}class u{apiBase="";allprofile="";updateprofile="";constructor(s=l){this.apiBase=s,this.allprofile=`${this.apiBase}/social/profiles`,this.updateprofile=`${this.apiBase}/social/profiles/`}getUserName(){return JSON.parse(localStorage.getItem("user"))?.name||null}createParams(s){return new URLSearchParams(s).toString()}getUpdateProfileURL(){const s=this.getUserName();if(!s)throw new Error("User is not logged in");return`${this.apiBase}/social/profiles/${s}`}getPostsByUserURL(s){if(!s)throw new Error("Username is required to fetch posts.");return`${this.apiBase}/social/profiles/${s}/posts`}getProfileDetails=async(s,{followers:o=!1,following:e=!1,posts:t=!1})=>{const r=this.createParams({_followers:o,_following:e,_posts:t}),a=`${this.allprofile}/${s}?${r}`,n=await fetch(a,{method:"GET",headers:i()});if(n.ok)return await n.json();const p=(await n.json()).errors[0]?.message||"Could not fetch profile details";throw new Error(p)};getFollowedUsers=async()=>{const s=this.getUserName(),e=(await this.getProfileDetails(s,{following:!0})).data.following;return e.map(t=>t.name),e};profile={update:async({bio:s})=>{const o=this.getUserName(),e=JSON.stringify({bio:s}),t=`${this.updateprofile}${o}`,r=await fetch(t,{method:"PUT",headers:i(),body:e});if(r.ok){const{data:c}=await r.json();return c}const n=(await r.json()).errors[0]?.message||"Could not update profile";throw new Error(n)},readPosts:async s=>{const o=this.createParams({_author:!0,_comments:!0,_reactions:!0}),e=`${this.getPostsByUserURL(s||this.getUserName())}?${o}`,t=await fetch(e,{method:"GET",headers:i()});if(t.ok){const{data:n}=await t.json();return console.log("data from api",n),n}const a=(await t.json()).errors[0]?.message||"Could not read posts by this user";throw new Error(a)},allProfiles:async()=>{const s=this.createParams({_following:!0,_followers:!0,_posts:!0}),o=`${this.allprofile}?${s}`,e=await fetch(o,{method:"GET",headers:i()});if(e.ok){const{data:a}=await e.json();return a}const r=(await e.json()).errors[0]?.message||"Could not read all profiles";throw new Error(r)},follow:async s=>{const o=`${this.apiBase}/social/profiles/${s}/follow`,e=await fetch(o,{method:"PUT",headers:i()});if(e.ok){const{data:a}=await e.json();return a}const r=(await e.json()).errors[0]?.message||"Could not follow user";throw new Error(r)},unfollow:async s=>{const o=`${this.apiBase}/social/profiles/${s}/unfollow`,e=await fetch(o,{method:"PUT",headers:i()});if(e.ok){const{data:a}=await e.json();return a}const r=(await e.json()).errors[0]?.message||"Could not unfollow user";throw new Error(r)},getFollowedUsers:async()=>{const s=this.getUserName();return(await this.getProfileDetails(s,{followers:!0})).data.followers}}}const m=new w(l),P=new f(l),y=new u(l);export{m as a,y as b,P as p};
